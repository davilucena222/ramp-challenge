{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        return previousResponse;\n      }\n\n      return {\n        data: previousResponse === null ? response.data : [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  });\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/project/home/davilucena222/workspace/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  Transaction,\n} from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] =\n    useState<PaginatedResponse<Transaction[]> | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<\n      PaginatedResponse<Transaction[]>,\n      PaginatedRequestParams\n    >(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n    });\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        return previousResponse;\n      }\n\n      return {\n        data:\n          previousResponse === null\n            ? response.data\n            : [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      };\n    });\n  });\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAOA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IACJN,QAAQ,CAA0C,IAA1C,CADV;EAGA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CAGnC,uBAHmC,EAGV;MACzBM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADxC,CAHU,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOG,gBAAP;MACD;;MAED,OAAO;QACLC,IAAI,EACFD,gBAAgB,KAAK,IAArB,GACIH,QAAQ,CAACI,IADb,GAEI,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CAJD;QAKLF,QAAQ,EAAEF,QAAQ,CAACE;MALd,CAAP;IAOD,CAZuB,CAAxB;EAaD,CArB2B,CAA5B;EAuBA,MAAMG,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDM;EAAlD,CAAP;AACD;;GAjCeX,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}