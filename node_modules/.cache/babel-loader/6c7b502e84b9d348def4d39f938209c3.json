{"ast":null,"code":"var _jsxFileName = \"/project/home/davilucena222/workspace/src/components/Transactions/TransactionPane.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n\n  let {\n    loading,\n    setTransactionApproval: consumerSetTransactionApproval\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" -\", \" \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: !approved // checkbox marcada se approved for false\n      ,\n      disabled: loading,\n      onChange: async newValue => {\n        await consumerSetTransactionApproval({\n          transactionId: transaction.id,\n          newValue: !approved // novo valor é o negado do atual\n\n        });\n        setApproved(!approved); // atualiza o estado com o negado do atual\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionPane, \"KPAjtgwy0mvFAelnTZhq541SWIA=\");\n\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","InputCheckbox","TransactionPane","loading","setTransactionApproval","consumerSetTransactionApproval","approved","setApproved","transaction","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","id","newValue","transactionId","Intl","NumberFormat","style","currency"],"sources":["/project/home/davilucena222/workspace/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport {\n  TransactionPaneComponent,\n  Transaction,\n  SetTransactionApprovalFunction,\n} from \"./types\";\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  loading,\n  setTransactionApproval: consumerSetTransactionApproval,\n}) => {\n  const [approved, setApproved] = useState(transaction.approved);\n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} -{\" \"}\n          {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={!approved} // checkbox marcada se approved for false\n        disabled={loading}\n        onChange={async (newValue) => {\n          await consumerSetTransactionApproval({\n            transactionId: transaction.id,\n            newValue: !approved, // novo valor é o negado do atual\n          });\n\n          setApproved(!approved); // atualiza o estado com o negado do atual\n        }}\n      />\n    </div>\n  );\n};\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAOA,OAAO,MAAMC,eAAyC,GAAG,QAGnD;EAAA;;EAAA,IAHoD;IACxDC,OADwD;IAExDC,sBAAsB,EAAEC;EAFgC,CAGpD;EACJ,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAACQ,WAAW,CAACF,QAAb,CAAxC;EAEA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBE,WAAW,CAACC,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBH,WAAW,CAACI,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGJ,WAAW,CAACK,QAAZ,CAAqBC,SADxB,OACoCN,WAAW,CAACK,QAAZ,CAAqBE,QADzD,QACqE,GADrE,EAEGP,WAAW,CAACQ,IAFf;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eASE,QAAC,aAAD;MACE,EAAE,EAAER,WAAW,CAACS,EADlB;MAEE,OAAO,EAAE,CAACX,QAFZ,CAEsB;MAFtB;MAGE,QAAQ,EAAEH,OAHZ;MAIE,QAAQ,EAAE,MAAOe,QAAP,IAAoB;QAC5B,MAAMb,8BAA8B,CAAC;UACnCc,aAAa,EAAEX,WAAW,CAACS,EADQ;UAEnCC,QAAQ,EAAE,CAACZ,QAFwB,CAEd;;QAFc,CAAD,CAApC;QAKAC,WAAW,CAAC,CAACD,QAAF,CAAX,CAN4B,CAMJ;MACzB;IAXH;MAAA;MAAA;MAAA;IAAA,QATF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,CA/BM;;GAAMJ,e;;KAAAA,e;AAiCb,MAAMQ,cAAc,GAAG,IAAIU,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}