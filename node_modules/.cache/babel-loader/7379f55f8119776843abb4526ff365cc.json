{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { PaginatedResponse } from \"../utils/types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState < PaginatedResponse || null > null;\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: response.data,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"4Qzw4OuU1zyUiaWngba9VirjqR0=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","PaginatedResponse","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/project/home/davilucena222/workspace/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  Transaction,\n} from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] =\n    useState<PaginatedResponse<Transaction[]> || null>(null);\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<\n      PaginatedResponse<Transaction[]>,\n      PaginatedRequestParams\n    >(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n    });\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return { data: response.data, nextPage: response.nextPage };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAEEC,iBAFF,QAIO,gBAJP;AAMA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IACJP,QAAQ,GAACC,iBAAT,IAA6C,OAAM,IADrD;EAGA,MAAMO,QAAQ,GAAGT,WAAW,CAAC,YAAY;IACvC,MAAMU,QAAQ,GAAG,MAAML,cAAc,CAGnC,uBAHmC,EAGV;MACzBM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADxC,CAHU,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MAED,OAAO;QAAEI,IAAI,EAAEJ,QAAQ,CAACI,IAAjB;QAAuBF,QAAQ,EAAEF,QAAQ,CAACE;MAA1C,CAAP;IACD,CANuB,CAAxB;EAOD,CAf2B,EAezB,CAACP,cAAD,EAAiBE,qBAAjB,CAfyB,CAA5B;EAiBA,MAAMQ,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDM;EAAlD,CAAP;AACD;;GA3BeX,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}